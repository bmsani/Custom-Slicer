{"version":3,"file":"visual.js","mappings":";;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AAC4E;AAC5E;AACA;AACO;AACP;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2BAA2B;AACxE;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,wBAAwB,kFAAsC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,qBAAqB,qFAAyC;AAC9D;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,gEAAgE;AAC5J;AACA;AACO,2BAA2B,2DAAW;AAC7C;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,oFAAoF;AAChL;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,uBAAuB;AACnH;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO,yBAAyB,2DAAW;AAC3C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,qKAAqK;AACjQ;AACA;AACO,2BAA2B,2DAAW;AAC7C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,mBAAmB;AAC/G;AACA;AACO,2BAA2B,2DAAW;AAC7C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,gEAAgE;AAC5J;AACA;AACO,6BAA6B,2DAAW;AAC/C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,6BAA6B;AACzH;AACA;AACO,gCAAgC,2DAAW;AAClD;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,6BAA6B;AACzH;AACA;AACO,0BAA0B,2DAAW;AAC5C;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,4EAA4E;AACxK;AACA;AACO,iCAAiC,2DAAW;AACnD;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,mBAAmB;AAC/G;AACA;AACO,iCAAiC,2DAAW;AACnD;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,+BAA+B;AAC3H;AACA;AACO,uBAAuB,yDAAS;AACvC;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO,0BAA0B,2DAAW;AAC5C;AACA;AACA;AACA;AACA;AACO,0BAA0B,2DAAW;AAC5C;AACA;AACA;AACA;AACA;AACO,yBAAyB,2DAAW;AAC3C;AACA;AACA;AACA;AACA;AACO,2BAA2B,2DAAW;AAC7C;AACA;AACA;AACA;AACA;AACO,+BAA+B,2DAAW;AACjD;AACA;AACA;AACA;AACA;AACA,6CAA6C,+CAA+C,yDAAyD;AACrJ;AACA;AACO,6BAA6B,2DAAW;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,2BAA2B;AACxE;AACA;AACA,eAAe;AACf;AACA;AACO,0BAA0B,8DAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,4BAA4B,8DAAc;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,wBAAwB,2DAAW;AAC1C;AACO,4BAA4B,2DAAW;AAC9C;AACA;;;;;;;;;;;AC9SO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,oBAAoB,GAAG,uBAAuB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iEAAe,yBAAyB,EAAC;AACzC;;;;;;;;;;;AC9IA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACrCa;AAIN,SAAS,QAAQ,CAAC,CAAgC;IACvD,MAAM,KAAK,GAAG,QAAQ,CAAC,eAAe,CAAC,KAAK,CAAC;IAC7C,KAAK,CAAC,WAAW,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC,aAAa,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,CAAC;IACxE,KAAK,CAAC,WAAW,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC,aAAa,CAAC,aAAa,CAAC,KAAK,IAAI,CAAC,CAAC;IAClF,KAAK,CAAC,WAAW,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC,aAAa,CAAC,YAAY,CAAC,KAAK,IAAI,CAAC,CAAC;IAChF,KAAK,CAAC,WAAW,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC,aAAa,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC;IAC1E,KAAK,CAAC,WAAW,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,aAAa,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,CAAC;IACxE,KAAK,CAAC,WAAW,CAAC,mBAAmB,EAAE,GAAG,CAAC,CAAC,aAAa,CAAC,cAAc,CAAC,KAAK,IAAI,CAAC,CAAC;AACtF,CAAC;;;;;;;;;;;;;;;ACZD;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AAEU;AAE6B;AACiC;AACJ;AAGvE,IAAO,sBAAsB,GAAG,iFAAuB,CAAC;AAExD,IAAO,uBAAuB,GAAG,kFAAwB,CAAC;AAE1D;;GAEG;AAEH,MAAM,qBAAsB,SAAQ,sBAAsB;IAA1D;;QACE,qBAAgB,GAAG,IAAI,sFAA4B,CAAC;YAClD,IAAI,EAAE,kBAAkB;YACxB,WAAW,EAAE,oBAAoB;YACjC,WAAW,EAAE,YAAY;YACzB,KAAK,EAAE,KAAK;SACb,CAAC,CAAC;QAEH,eAAU,GAAG,IAAI,uFAA6B,CAAC;YAC7C,IAAI,EAAE,YAAY;YAClB,WAAW,EAAE,aAAa;YAC1B,KAAK,EAAE,mBAAmB;SAC3B,CAAC,CAAC;QAEH,aAAQ,GAAG,IAAI,sFAA4B,CAAC;YAC1C,IAAI,EAAE,UAAU;YAChB,WAAW,EAAE,WAAW;YACxB,KAAK,EAAE,EAAE;SACV,CAAC,CAAC;QAEH,iBAAY,GAAG,IAAI,wFAA8B,CAAC;YAChD,IAAI,EAAE,cAAc;YACpB,WAAW,EAAE,eAAe;YAC5B,KAAK,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE;SAC5B,CAAC,CAAC;QAEH,cAAS,GAAG,IAAI,2FAAiC,CAAC;YAChD,IAAI,EAAE,WAAW;YACjB,WAAW,EAAE,gBAAgB;YAC7B,IAAI,0EAA8C;YAClD,KAAK,EAAE,QAAQ;SAChB,CAAC,CAAC;QAEH,kBAAa,GAAG,IAAI,sFAA4B,CAAC;YAC/C,IAAI,EAAE,eAAe;YACrB,WAAW,EAAE,gBAAgB;YAC7B,KAAK,EAAE,CAAC;SACT,CAAC,CAAC;QAEH,iBAAY,GAAG,IAAI,sFAA4B,CAAC;YAC9C,IAAI,EAAE,cAAc;YACpB,WAAW,EAAE,eAAe;YAC5B,KAAK,EAAE,CAAC;SACT,CAAC,CAAC;QAEH,mBAAc,GAAG,IAAI,mFAAyB,CAAC;YAC7C,IAAI,EAAE,gBAAgB;YACtB,WAAW,EAAE,iBAAiB;YAC9B,KAAK,EAAE,EAAE;SACV,CAAC,CAAC;QAEH,SAAI,GAAW,gBAAgB,CAAC;QAChC,gBAAW,GAAW,gBAAgB,CAAC;QACvC,WAAM,GAAmC;YACvC,IAAI,CAAC,gBAAgB;YACrB,IAAI,CAAC,UAAU;YACf,IAAI,CAAC,QAAQ;YACb,IAAI,CAAC,YAAY;YACjB,IAAI,CAAC,SAAS;YACd,IAAI,CAAC,aAAa;YAClB,IAAI,CAAC,YAAY;YACjB,IAAI,CAAC,cAAc;SACpB,CAAC;IACJ,CAAC;CAAA;AAED,MAAM,yBAA0B,SAAQ,sBAAsB;IAA9D;;QACE,SAAI,GAAW,eAAe,CAAC;QAC/B,gBAAW,GAAW,aAAa,CAAC;QAEpC,qFAAqF;QACrF,WAAM,GAAmC,EAAE,CAAC;IAC9C,CAAC;CAAA;AAED;;;GAGG;AACI,MAAM,6BAA8B,SAAQ,uBAAuB;IAA1E;;QACE,oDAAoD;QACpD,kBAAa,GAAG,IAAI,qBAAqB,EAAE,CAAC;QAC5C,kBAAa,GAAG,IAAI,yBAAyB,EAAE,CAAC;QAEhD,UAAK,GAAG,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IAoBnD,CAAC;IAlBC,qBAAqB,CAAC,UAAoB;QACxC,IAAI,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;QACvC,IAAI,UAAU,EAAE;YACd,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;gBAC/B,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBACvB,MAAM,CAAC,IAAI,CACT,IAAI,wFAA8B,CAAC;oBACjC,IAAI,EAAE,WAAW;oBACjB,WAAW,EAAE,SAAS,CAAC,SAAS;oBAChC,KAAK,EAAE,EAAE,KAAK,EAAE,SAAS,CAAC,KAAK,EAAE;oBACjC,QAAQ,EAAE,wGAA+C,4EAAoE;oBAC7H,mBAAmB,EAAE,SAAS,CAAC,WAAW,CAAC,WAAW,EAAE;oBACxD,YAAY,+DAAuD;iBACpE,CAAC,CACH,CAAC;YACJ,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;CACF;;;;;;;;;;;;AC/IY;AAsBN,SAAS,aAAa,CAAC,OAA4B,EAAE,IAAiB;IAC3E,IAAI,IAAW,CAAC;IAChB,IAAI;QACF,MAAM,UAAU,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAClE,MAAM,SAAS,GAAG,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC;QAC9C,MAAM,KAAK,GAAG,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,OAAO,CAAC,GAAG,CAAC,CAAC;QACtC,MAAM,YAAY,GAAiC,IAAI,CAAC,YAAY,CAAC;QACrE,IAAI,MAAM,GAAa,EAAE,CAAC,CAAC,sCAAsC;QAEjE,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;YACzC,MAAM,KAAK,GAAW,qBAAqB,CAAC,UAAU,EAAE,KAAK,EAAE,YAAY,CAAC,CAAC;YAC7E,MAAM,WAAW,GAAiB,IAAI,CAAC,wBAAwB,EAAE,CAAC,YAAY,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,iBAAiB,EAAE,CAAC;YACtH,MAAM,WAAW,GAAW;gBAC1B,SAAS,EAAE,GAAG,KAAK,EAAE;gBACrB,KAAK,EAAE,GAAG,KAAK,EAAE;gBACjB,WAAW;aACZ,CAAC;YACF,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,IAAI,GAAG;YACL,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC;YACrC,MAAM,EAAE,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,SAAS,CAAC,KAAK,GAAG,CAAC,CAAC;SACxC,CAAC;KACH;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,GAAG;YACL,MAAM,EAAE;gBACN;oBACE,SAAS,EAAE,EAAE;oBACb,KAAK,EAAE,EAAE;oBACT,WAAW,EAAE,IAAI;iBAClB;aACF;YACD,KAAK,EAAE,EAAE;YACT,MAAM,EAAE,EAAE;SACX,CAAC;KACH;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,qBAAqB,CAAC,QAAgC,EAAE,KAAa,EAAE,YAA0C;IACxH,IAAI,YAAY,CAAC,cAAc,EAAE;QAC/B,OAAO,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC;KACtC;IAED,MAAM,YAAY,GAAG,YAAY,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC;IAC9E,MAAM,gBAAgB,GAAG;QACvB,KAAK,EAAE;YACL,KAAK,EAAE,YAAY;SACpB;KACF,CAAC;IAEF,OAAO,yBAAyB,CAAO,QAAQ,EAAE,KAAK,EAAE,eAAe,EAAE,WAAW,EAAE,gBAAgB,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC;AACtH,CAAC;AAEM,SAAS,yBAAyB,CACvC,QAAgC,EAChC,KAAa,EACb,UAAkB,EAClB,YAAoB,EACpB,YAAe;IAEf,IAAI,eAAe,GAAG,QAAQ,CAAC,OAAO,CAAC;IAEvC,IAAI,eAAe,EAAE;QACnB,IAAI,cAAc,GAAmB,eAAe,CAAC,KAAK,CAAC,CAAC;QAC5D,IAAI,cAAc,EAAE;YAClB,IAAI,MAAM,GAAG,cAAc,CAAC,UAAU,CAAC,CAAC;YACxC,IAAI,MAAM,EAAE;gBACV,IAAI,QAAQ,GAAS,MAAM,CAAC,YAAY,CAAC,CAAC;gBAC1C,IAAI,QAAQ,KAAK,SAAS,EAAE;oBAC1B,OAAO,QAAQ,CAAC;iBACjB;aACF;SACF;KACF;IACD,OAAO,YAAY,CAAC;AACtB,CAAC;;;;;;;;;;;;;;;ACpGD;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AACU;AAGqE;AAClD;AAOM;AACqB;AACJ;AAEhD,MAAM,MAAM;IASjB,YAAY,OAAiC;QAC3C,OAAO,CAAC,GAAG,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;QAC3C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,yBAAyB,GAAG,IAAI,sFAAyB,EAAE,CAAC;QACjE,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,QAAQ,EAAE;YACZ,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC/C,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;YACjD,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAChD,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC7C,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACzC;IACH,CAAC;IAEM,MAAM,CAAC,OAA4B;QACxC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,yBAAyB,CAAC,+BAA+B,CAAC,6EAA6B,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC;QAC3I,MAAM,cAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC;QAC7D,4DAAQ,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAClC,IAAI,CAAC,IAAI,GAAG,sEAAa,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9C,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAChE,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC;QAChC,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE;YAClC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;SACtC;QAED,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,gBAAgB,CAAC,KAAK,EAAE,cAAc,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAE7F,IAAI,MAAM,EAAE;YACV,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;gBAC9B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAEO,OAAO,CAAC,GAAW,EAAE,KAAa;QACxC,IAAI,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC9C,IAAI,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QACnD,aAAa,CAAC,SAAS,GAAG,GAAG,CAAC;QAC9B,aAAa,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;QAClC,UAAU,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;QACtC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IAC3C,CAAC;IAED;;;OAGG;IACI,kBAAkB;QACvB,OAAO,IAAI,CAAC,yBAAyB,CAAC,oBAAoB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IACtF,CAAC;CACF;;;;;;;;ACpGD;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN0C;AAK1C,IAAI,UAAU,GAAQ,SAAS,CAAC;AAChC,IAAI,OAAO,GAAQ,MAAM,CAAC,UAAU,CAAC,CAAC;AACtC,IAAI,kDAAkD,GAAkB;IACpE,IAAI,EAAE,oDAAoD;IAC1D,WAAW,EAAE,cAAc;IAC3B,KAAK,EAAE,QAAQ;IACf,UAAU,EAAE,OAAO;IACnB,MAAM,EAAE,CAAC,OAAiC,EAAE,EAAE;QAC1C,IAAI,wDAAM,EAAE;YACR,OAAO,IAAI,wDAAM,CAAC,OAAO,CAAC,CAAC;SAC9B;QACD,MAAM,2BAA2B,CAAC;IACtC,CAAC;IACD,iBAAiB,EAAE,CAAC,QAAgB,EAAE,OAAiC,EAAE,YAAoB,EAAE,EAAE;QAC7F,MAAM,cAAc,GAAG,UAAU,CAAC,cAAc,CAAC;QACjD,IAAI,QAAQ,IAAI,cAAc,EAAE;YAC5B,IAAI,cAAc,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;SACvD;IACL,CAAC;IACD,MAAM,EAAE,IAAI;CACf,CAAC;AACF,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;IAChC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;IACxC,OAAO,CAAC,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;IACxD,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,oDAAoD,CAAC,GAAG,kDAAkD,CAAC;CACtI;AACD,iEAAe,kDAAkD,EAAC","sources":["webpack:///./node_modules/powerbi-visuals-utils-dataviewutils/lib/dataViewWildcard.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/FormattingSettingsComponents.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/FormattingSettingsService.js","webpack:///./node_modules/powerbi-visuals-utils-formattingmodel/lib/utils/FormattingSettingsUtils.js","webpack:///./src/setStyle.ts","webpack:///./src/settings.ts","webpack:///./src/transformdata.ts","webpack:///./src/visual.ts","webpack:///external var \"Function('return this')()\"","webpack:///external var \"null\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./.tmp/precompile/visualPlugin.ts"],"sourcesContent":["/*\n*  Power BI Visualizations\n*\n*  Copyright (c) Microsoft Corporation\n*  All rights reserved.\n*  MIT License\n*\n*  Permission is hereby granted, free of charge, to any person obtaining a copy\n*  of this software and associated documentation files (the \"\"Software\"\"), to deal\n*  in the Software without restriction, including without limitation the rights\n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n*  copies of the Software, and to permit persons to whom the Software is\n*  furnished to do so, subject to the following conditions:\n*\n*  The above copyright notice and this permission notice shall be included in\n*  all copies or substantial portions of the Software.\n*\n*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n*  THE SOFTWARE.\n*/\nexport function createDataViewWildcardSelector(dataViewWildcardMatchingOption) {\n    if (dataViewWildcardMatchingOption == null) {\n        dataViewWildcardMatchingOption = 0 /* DataViewWildcardMatchingOption.InstancesAndTotals */;\n    }\n    const selector = {\n        data: [\n            {\n                dataViewWildcard: {\n                    matchingOption: dataViewWildcardMatchingOption\n                }\n            }\n        ]\n    };\n    return selector;\n}\n//# sourceMappingURL=dataViewWildcard.js.map","/**\n * Powerbi utils components classes for custom visual formatting pane objects\n *\n */\nimport * as FormattingSettingsParser from \"./utils/FormattingSettingsUtils\";\nclass NamedEntity {\n}\nexport class Model {\n}\nexport class Card extends NamedEntity {\n    getFormattingCard(objectName, group, localizationManager) {\n        return {\n            displayName: (localizationManager && this.displayNameKey)\n                ? localizationManager.getDisplayName(this.displayNameKey) : this.displayName,\n            description: (localizationManager && this.descriptionKey)\n                ? localizationManager.getDisplayName(this.descriptionKey) : this.description,\n            groups: [group],\n            uid: objectName,\n            analyticsPane: this.analyticsPane\n        };\n    }\n}\nexport class SimpleSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName, localizationManager) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const sliceDisplayName = (localizationManager && this.displayNameKey) ? localizationManager.getDisplayName(this.displayNameKey) : this.displayName;\n        const sliceDescription = (localizationManager && this.descriptionKey) ? localizationManager.getDisplayName(this.descriptionKey) : this.description;\n        const componentDisplayName = {\n            displayName: sliceDisplayName,\n            description: sliceDescription,\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName, localizationManager)\n            } });\n    }\n    getFormattingComponent(objectName, localizationManager) {\n        return {\n            descriptor: FormattingSettingsParser.getDescriptor(objectName, this),\n            value: this.value,\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return [{\n                objectName: objectName,\n                propertyName: this.name\n            }];\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a;\n        let newValue = (_a = dataViewObjects === null || dataViewObjects === void 0 ? void 0 : dataViewObjects[objectName]) === null || _a === void 0 ? void 0 : _a[this.name];\n        this.value = FormattingSettingsParser.getPropertyValue(this, newValue, this.value);\n    }\n}\nexport class AlignmentGroup extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"AlignmentGroup\" /* visuals.FormattingComponent.AlignmentGroup */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { mode: this.mode, supportsNoSelection: this.supportsNoSelection });\n    }\n}\nexport class ToggleSwitch extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ToggleSwitch\" /* visuals.FormattingComponent.ToggleSwitch */;\n    }\n}\nexport class ColorPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ColorPicker\" /* visuals.FormattingComponent.ColorPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { defaultColor: this.defaultColor, isNoFillItemSupported: this.isNoFillItemSupported });\n    }\n}\nexport class NumUpDown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"NumUpDown\" /* visuals.FormattingComponent.NumUpDown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { options: this.options });\n    }\n}\nexport class Slider extends NumUpDown {\n    constructor() {\n        super(...arguments);\n        this.type = \"Slider\" /* visuals.FormattingComponent.Slider */;\n    }\n}\nexport class DatePicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DatePicker\" /* visuals.FormattingComponent.DatePicker */;\n    }\n    getFormattingComponent(objectName, localizationManager) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: (localizationManager && this.placeholderKey) ? localizationManager.getDisplayName(this.placeholderKey) : this.placeholder, validators: this.validators });\n    }\n}\nexport class ItemDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { items: this.items });\n    }\n}\nexport class AutoDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { mergeValues: this.mergeValues, filterValues: this.filterValues });\n    }\n}\nexport class DurationPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DurationPicker\" /* visuals.FormattingComponent.DurationPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nexport class ErrorRangeControl extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ErrorRangeControl\" /* visuals.FormattingComponent.ErrorRangeControl */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nexport class FieldPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FieldPicker\" /* visuals.FormattingComponent.FieldPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators, allowMultipleValues: this.allowMultipleValues });\n    }\n}\nexport class ItemFlagsSelection extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { items: this.items });\n    }\n}\nexport class AutoFlagsSelection extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n}\nexport class TextInput extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"TextInput\" /* visuals.FormattingComponent.TextInput */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: this.placeholder });\n    }\n}\nexport class TextArea extends TextInput {\n    constructor() {\n        super(...arguments);\n        this.type = \"TextArea\" /* visuals.FormattingComponent.TextArea */;\n    }\n}\nexport class FontPicker extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FontPicker\" /* visuals.FormattingComponent.FontPicker */;\n    }\n}\nexport class GradientBar extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"GradientBar\" /* visuals.FormattingComponent.GradientBar */;\n    }\n}\nexport class ImageUpload extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ImageUpload\" /* visuals.FormattingComponent.ImageUpload */;\n    }\n}\nexport class ListEditor extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ListEditor\" /* visuals.FormattingComponent.ListEditor */;\n    }\n}\nexport class ReadOnlyText extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ReadOnlyText\" /* visuals.FormattingComponent.ReadOnlyText */;\n    }\n}\nexport class ShapeMapSelector extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ShapeMapSelector\" /* visuals.FormattingComponent.ShapeMapSelector */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { isAzMapReferenceSelector: this.isAzMapReferenceSelector });\n    }\n}\nexport class CompositeSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const componentDisplayName = {\n            displayName: this.displayName,\n            description: this.description,\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName)\n            } });\n    }\n}\nexport class FontControl extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FontControl\" /* visuals.FormattingComponent.FontControl */;\n    }\n    getFormattingComponent(objectName) {\n        var _a, _b, _c;\n        return {\n            fontFamily: this.fontFamily.getFormattingComponent(objectName),\n            fontSize: this.fontSize.getFormattingComponent(objectName),\n            bold: (_a = this.bold) === null || _a === void 0 ? void 0 : _a.getFormattingComponent(objectName),\n            italic: (_b = this.italic) === null || _b === void 0 ? void 0 : _b.getFormattingComponent(objectName),\n            underline: (_c = this.underline) === null || _c === void 0 ? void 0 : _c.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.fontFamily.getRevertToDefaultDescriptor(objectName)\n            .concat(this.fontSize.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bold ? this.bold.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.italic ? this.italic.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.underline ? this.underline.getRevertToDefaultDescriptor(objectName) : []);\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a, _b, _c;\n        this.fontFamily.setPropertiesValues(dataViewObjects, objectName);\n        this.fontSize.setPropertiesValues(dataViewObjects, objectName);\n        (_a = this.bold) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, objectName);\n        (_b = this.italic) === null || _b === void 0 ? void 0 : _b.setPropertiesValues(dataViewObjects, objectName);\n        (_c = this.underline) === null || _c === void 0 ? void 0 : _c.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nexport class MarginPadding extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"MarginPadding\" /* visuals.FormattingComponent.MarginPadding */;\n    }\n    getFormattingComponent(objectName) {\n        return {\n            left: this.left.getFormattingComponent(objectName),\n            right: this.right.getFormattingComponent(objectName),\n            top: this.top.getFormattingComponent(objectName),\n            bottom: this.bottom.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.left.getRevertToDefaultDescriptor(objectName)\n            .concat(this.right.getRevertToDefaultDescriptor(objectName))\n            .concat(this.top.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bottom.getRevertToDefaultDescriptor(objectName));\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        this.left.setPropertiesValues(dataViewObjects, objectName);\n        this.right.setPropertiesValues(dataViewObjects, objectName);\n        this.top.setPropertiesValues(dataViewObjects, objectName);\n        this.bottom.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nexport class Container extends NamedEntity {\n}\nexport class ContainerItem extends NamedEntity {\n}\n//# sourceMappingURL=FormattingSettingsComponents.js.map","export class FormattingSettingsService {\n    constructor(localizationManager) {\n        this.localizationManager = localizationManager;\n    }\n    /**\n     * Build visual formatting settings model from metadata dataView\n     *\n     * @param dataViews metadata dataView object\n     * @returns visual formatting settings model\n     */\n    populateFormattingSettingsModel(typeClass, dataViews) {\n        var _a, _b, _c;\n        let defaultSettings = new typeClass();\n        let dataViewObjects = (_b = (_a = dataViews === null || dataViews === void 0 ? void 0 : dataViews[0]) === null || _a === void 0 ? void 0 : _a.metadata) === null || _b === void 0 ? void 0 : _b.objects;\n        if (dataViewObjects) {\n            // loop over each formatting property and set its new value if exists\n            (_c = defaultSettings.cards) === null || _c === void 0 ? void 0 : _c.forEach((card) => {\n                var _a, _b, _c;\n                (_a = card === null || card === void 0 ? void 0 : card.slices) === null || _a === void 0 ? void 0 : _a.forEach((slice) => {\n                    slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                });\n                (_c = (_b = card === null || card === void 0 ? void 0 : card.container) === null || _b === void 0 ? void 0 : _b.containerItems) === null || _c === void 0 ? void 0 : _c.forEach((containerItem) => {\n                    var _a;\n                    (_a = containerItem === null || containerItem === void 0 ? void 0 : containerItem.slices) === null || _a === void 0 ? void 0 : _a.forEach((slice) => {\n                        slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                    });\n                });\n            });\n        }\n        return defaultSettings;\n    }\n    /**\n     * Build formatting model by parsing formatting settings model object\n     *\n     * @returns powerbi visual formatting model\n     */\n    buildFormattingModel(formattingSettingsModel) {\n        var _a;\n        let formattingModel = {\n            cards: []\n        };\n        (_a = formattingSettingsModel.cards) === null || _a === void 0 ? void 0 : _a.forEach((card) => {\n            if (!card)\n                return;\n            const objectName = card.name;\n            const groupUid = card.name + \"-group\";\n            let formattingGroup = {\n                displayName: undefined,\n                slices: [],\n                uid: groupUid\n            };\n            let formattingCard = card.getFormattingCard(objectName, formattingGroup, this.localizationManager);\n            formattingModel.cards.push(formattingCard);\n            // In case formatting model adds data points or top categories (Like when you modify specific visual category color).\n            // these categories use same object name and property name from capabilities and the generated uid will be the same for these formatting categories properties\n            // Solution => Save slice names to modify each slice uid to be unique by adding counter value to the new slice uid\n            const sliceNames = {};\n            // Build formatting container slice for each property\n            if (card.container) {\n                const container = card.container;\n                const containerUid = groupUid + \"-container\";\n                const formattingContainer = {\n                    displayName: (this.localizationManager && container.displayNameKey)\n                        ? this.localizationManager.getDisplayName(container.displayNameKey) : container.displayName,\n                    description: (this.localizationManager && container.descriptionKey)\n                        ? this.localizationManager.getDisplayName(container.descriptionKey) : container.description,\n                    containerItems: [],\n                    uid: containerUid\n                };\n                container.containerItems.forEach((containerItem) => {\n                    // Build formatting container item object\n                    const containerIemName = containerItem.displayNameKey ? containerItem.displayNameKey : containerItem.displayName;\n                    const containerItemUid = containerUid + containerIemName;\n                    let formattingContainerItem = {\n                        displayName: (this.localizationManager && containerItem.displayNameKey)\n                            ? this.localizationManager.getDisplayName(containerItem.displayNameKey) : containerItem.displayName,\n                        slices: [],\n                        uid: containerItemUid\n                    };\n                    // Build formatting slices and add them to current formatting container item\n                    this.buildFormattingSlices(containerItem.slices, objectName, sliceNames, formattingCard, formattingContainerItem.slices);\n                    formattingContainer.containerItems.push(formattingContainerItem);\n                });\n                formattingGroup.container = formattingContainer;\n            }\n            if (card.slices) {\n                // Build formatting slice for each property\n                this.buildFormattingSlices(card.slices, objectName, sliceNames, formattingCard, formattingGroup.slices);\n            }\n            formattingCard.revertToDefaultDescriptors = this.getRevertToDefaultDescriptor(card);\n        });\n        return formattingModel;\n    }\n    buildFormattingSlices(slices, objectName, sliceNames, formattingCard, formattingSlices) {\n        slices === null || slices === void 0 ? void 0 : slices.forEach((slice) => {\n            let formattingSlice = slice === null || slice === void 0 ? void 0 : slice.getFormattingSlice(objectName, this.localizationManager);\n            if (formattingSlice) {\n                // Modify formatting slice uid if needed\n                if (sliceNames[slice.name] === undefined) {\n                    sliceNames[slice.name] = 0;\n                }\n                else {\n                    sliceNames[slice.name]++;\n                    formattingSlice.uid = `${formattingSlice.uid}-${sliceNames[slice.name]}`;\n                }\n                // Set as topLevelToggle if topLevelToggle boolean was set to true\n                if (slice.topLevelToggle) {\n                    formattingSlice.suppressDisplayName = true;\n                    formattingCard.topLevelToggle = formattingSlice;\n                }\n                else {\n                    formattingSlices.push(formattingSlice);\n                }\n            }\n        });\n    }\n    getRevertToDefaultDescriptor(card) {\n        var _a, _b;\n        // Proceeded slice names are saved to prevent duplicated default descriptors in case of using \n        // formatting categories & selectors, since they have the same descriptor objectName and propertyName\n        const sliceNames = {};\n        let revertToDefaultDescriptors = [];\n        let cardSlicesDefaultDescriptors = this.getSlicesRevertToDefaultDescriptor(card.name, card.slices, sliceNames);\n        let cardContainerSlicesDefaultDescriptors = [];\n        (_b = (_a = card.container) === null || _a === void 0 ? void 0 : _a.containerItems) === null || _b === void 0 ? void 0 : _b.forEach((containerItem) => {\n            cardContainerSlicesDefaultDescriptors = cardContainerSlicesDefaultDescriptors.concat(this.getSlicesRevertToDefaultDescriptor(card.name, containerItem.slices, sliceNames));\n        });\n        revertToDefaultDescriptors = cardSlicesDefaultDescriptors.concat(cardContainerSlicesDefaultDescriptors);\n        return revertToDefaultDescriptors;\n    }\n    getSlicesRevertToDefaultDescriptor(cardName, slices, sliceNames) {\n        let revertToDefaultDescriptors = [];\n        slices === null || slices === void 0 ? void 0 : slices.forEach((slice) => {\n            if (slice && !sliceNames[slice.name]) {\n                sliceNames[slice.name] = true;\n                revertToDefaultDescriptors = revertToDefaultDescriptors.concat(slice.getRevertToDefaultDescriptor(cardName));\n            }\n        });\n        return revertToDefaultDescriptors;\n    }\n}\nexport default FormattingSettingsService;\n//# sourceMappingURL=FormattingSettingsService.js.map","/**\n * Build and return formatting descriptor for simple slice\n *\n * @param objectName Object name from capabilities\n * @param slice formatting simple slice\n * @returns simple slice formatting descriptor\n */\nexport function getDescriptor(objectName, slice) {\n    return {\n        objectName: objectName,\n        propertyName: slice.name,\n        selector: slice.selector,\n        altConstantValueSelector: slice.altConstantSelector,\n        instanceKind: slice.instanceKind\n    };\n}\n/**\n * Get property value from dataview objects if exists\n * Else return the default value from formatting settings object\n *\n * @param value dataview object value\n * @param defaultValue formatting settings default value\n * @returns formatting property value\n */\nexport function getPropertyValue(slice, value, defaultValue) {\n    if (value == null || (typeof value === \"object\" && !value.solid)) {\n        return defaultValue;\n    }\n    if (value.solid) {\n        return { value: value === null || value === void 0 ? void 0 : value.solid.color };\n    }\n    if (slice === null || slice === void 0 ? void 0 : slice.items) {\n        let itemsArray = slice.items;\n        return itemsArray.find(item => item.value == value);\n    }\n    return value;\n}\n//# sourceMappingURL=FormattingSettingsUtils.js.map","\"use strict\";\n\nimport { VisualFormattingSettingsModel } from \"./settings\";\n\nexport function setStyle(s: VisualFormattingSettingsModel): void {\n  const style = document.documentElement.style;\n  style.setProperty(\"--text-align\", `${s.dataPointCard.textAlign.value}`);\n  style.setProperty(\"--padding-bottom\", `${s.dataPointCard.paddingBottom.value}px`);\n  style.setProperty(\"--margin-bottom\", `${s.dataPointCard.marginBottom.value}px`);\n  style.setProperty(\"--font-family\", `${s.dataPointCard.fontFamily.value}`);\n  style.setProperty(\"--font-size\", `${s.dataPointCard.fontSize.value}pt`);\n  style.setProperty(\"--underline-width\", `${s.dataPointCard.underlineWidth.value}px`);\n}\n","/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\n\"use strict\";\n\nimport powerbi from \"powerbi-visuals-api\";\nimport { formattingSettings } from \"powerbi-visuals-utils-formattingmodel\";\nimport { dataViewWildcard } from \"powerbi-visuals-utils-dataviewutils\";\nimport { IValue } from \"./transformdata\";\n\nimport FormattingSettingsCard = formattingSettings.Card;\nimport FormattingSettingsSlice = formattingSettings.Slice;\nimport FormattingSettingsModel = formattingSettings.Model;\n\n/**\n * Data Point Formatting Card\n */\n\nclass DataPointCardSettings extends FormattingSettingsCard {\n  allSelectedLabel = new formattingSettings.TextInput({\n    name: \"allSelectedLabel\",\n    displayName: \"All Selected Label\",\n    placeholder: \"Enter text\",\n    value: \"All\",\n  });\n\n  fontFamily = new formattingSettings.FontPicker({\n    name: \"fontFamily\",\n    displayName: \"Font Family\",\n    value: \"Arial, sans-serif\",\n  });\n\n  fontSize = new formattingSettings.NumUpDown({\n    name: \"fontSize\",\n    displayName: \"Text Size\",\n    value: 16,\n  });\n\n  defaultColor = new formattingSettings.ColorPicker({\n    name: \"defaultColor\",\n    displayName: \"Default Color\",\n    value: { value: \"#000000\" },\n  });\n\n  textAlign = new formattingSettings.AlignmentGroup({\n    name: \"textAlign\",\n    displayName: \"Line Alignment\",\n    mode: powerbi.visuals.AlignmentGroupMode.Horizonal,\n    value: \"center\",\n  });\n\n  paddingBottom = new formattingSettings.NumUpDown({\n    name: \"paddingBottom\",\n    displayName: \"Padding Bottom\",\n    value: 2,\n  });\n\n  marginBottom = new formattingSettings.NumUpDown({\n    name: \"marginBottom\",\n    displayName: \"Margin Bottom\",\n    value: 6,\n  });\n\n  underlineWidth = new formattingSettings.Slider({\n    name: \"underlineWidth\",\n    displayName: \"Underline Width\",\n    value: 10,\n  });\n\n  name: string = \"slicerSettings\";\n  displayName: string = \"SlicerSettings\";\n  slices: Array<FormattingSettingsSlice> = [\n    this.allSelectedLabel,\n    this.fontFamily,\n    this.fontSize,\n    this.defaultColor,\n    this.textAlign,\n    this.paddingBottom,\n    this.marginBottom,\n    this.underlineWidth,\n  ];\n}\n\nclass ColorSelectorCardSettings extends FormattingSettingsCard {\n  name: string = \"colorSelector\";\n  displayName: string = \"Data Colors\";\n\n  // slices will be populated in barChart settings model `populateColorSelector` method\n  slices: Array<FormattingSettingsSlice> = [];\n}\n\n/**\n * visual settings model class\n *\n */\nexport class VisualFormattingSettingsModel extends FormattingSettingsModel {\n  // Create formatting settings model formatting cards\n  dataPointCard = new DataPointCardSettings();\n  colorSelector = new ColorSelectorCardSettings();\n\n  cards = [this.dataPointCard, this.colorSelector];\n\n  populateColorSelector(dataPoints: IValue[]) {\n    let slices = this.colorSelector.slices;\n    if (dataPoints) {\n      dataPoints.forEach((dataPoint) => {\n        console.log(dataPoint);\n        slices.push(\n          new formattingSettings.ColorPicker({\n            name: \"lineColor\",\n            displayName: dataPoint.valueName,\n            value: { value: dataPoint.color },\n            selector: dataViewWildcard.createDataViewWildcardSelector(dataViewWildcard.DataViewWildcardMatchingOption.InstancesAndTotals),\n            altConstantSelector: dataPoint.selectionId.getSelector(),\n            instanceKind: powerbi.VisualEnumerationInstanceKinds.ConstantOrRule,\n          })\n        );\n      });\n    }\n  }\n}\n","\"use strict\";\n\nimport powerbi from \"powerbi-visuals-api\";\nimport VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;\nimport IVisualHost = powerbi.extensibility.visual.IVisualHost;\nimport ISelectionId = powerbi.visuals.ISelectionId;\nimport DataViewCategoryColumn = powerbi.DataViewCategoryColumn;\nimport ISandboxExtendedColorPalette = powerbi.extensibility.ISandboxExtendedColorPalette;\nimport Fill = powerbi.Fill;\nimport DataViewObject = powerbi.DataViewObject;\n\nexport interface IValue {\n  valueName: string;\n  color: string;\n  selectionId: ISelectionId;\n}\nexport interface VData {\n  values: IValue[];\n  table: string;\n  column: string;\n}\n\nexport function transformData(options: VisualUpdateOptions, host: IVisualHost): VData {\n  let data: VData;\n  try {\n    const categories = options.dataViews[0].categorical.categories[0];\n    const queryName = categories.source.queryName;\n    const dotIx = queryName?.indexOf(\".\");\n    const colorPalette: ISandboxExtendedColorPalette = host.colorPalette;\n    let values: IValue[] = []; // Initialize values as an empty array\n\n    categories.values.forEach((value, index) => {\n      const color: string = getColumnColorByIndex(categories, index, colorPalette);\n      const selectionId: ISelectionId = host.createSelectionIdBuilder().withCategory(categories, index).createSelectionId();\n      const singleValue: IValue = {\n        valueName: `${value}`,\n        color: `${color}`,\n        selectionId,\n      };\n      values.push(singleValue);\n    });\n\n    data = {\n      values: values, // Assign the array of values to the 'values' property\n      table: queryName?.substring(0, dotIx),\n      column: queryName?.substring(dotIx + 1),\n    };\n  } catch (error) {\n    data = {\n      values: [\n        {\n          valueName: ``,\n          color: ``,\n          selectionId: null,\n        },\n      ],\n      table: \"\",\n      column: \"\",\n    };\n  }\n  return data;\n}\n\nfunction getColumnColorByIndex(category: DataViewCategoryColumn, index: number, colorPalette: ISandboxExtendedColorPalette): string {\n  if (colorPalette.isHighContrast) {\n    return colorPalette.background.value;\n  }\n\n  const defaultColor = colorPalette.getColor(`${category.values[index]}`).value;\n  const defaultColorFill = {\n    solid: {\n      color: defaultColor,\n    },\n  };\n\n  return getCategoricalObjectValue<Fill>(category, index, \"colorSelector\", \"lineColor\", defaultColorFill).solid.color;\n}\n\nexport function getCategoricalObjectValue<T>(\n  category: DataViewCategoryColumn,\n  index: number,\n  objectName: string,\n  propertyName: string,\n  defaultValue: T\n): T {\n  let categoryObjects = category.objects;\n\n  if (categoryObjects) {\n    let categoryObject: DataViewObject = categoryObjects[index];\n    if (categoryObject) {\n      let object = categoryObject[objectName];\n      if (object) {\n        let property: T = <T>object[propertyName];\n        if (property !== undefined) {\n          return property;\n        }\n      }\n    }\n  }\n  return defaultValue;\n}\n","/*\n *  Power BI Visual CLI\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\"use strict\";\n\nimport powerbi from \"powerbi-visuals-api\";\nimport { FormattingSettingsService } from \"powerbi-visuals-utils-formattingmodel\";\nimport \"./../style/visual.less\";\n\nimport VisualConstructorOptions = powerbi.extensibility.visual.VisualConstructorOptions;\nimport VisualUpdateOptions = powerbi.extensibility.visual.VisualUpdateOptions;\nimport IVisual = powerbi.extensibility.visual.IVisual;\nimport IVisualHost = powerbi.extensibility.visual.IVisualHost;\n\nimport { setStyle } from \"./setStyle\";\nimport { VisualFormattingSettingsModel } from \"./settings\";\nimport { transformData, VData } from \"./transformdata\";\n\nexport class Visual implements IVisual {\n  private target: HTMLElement;\n  private formattingSettings: VisualFormattingSettingsModel;\n  private formattingSettingsService: FormattingSettingsService;\n  private data: VData;\n  private container: HTMLElement;\n  private slicerItems: HTMLElement;\n  private host: IVisualHost;\n\n  constructor(options: VisualConstructorOptions) {\n    console.log(\"Visual constructor\", options);\n    this.host = options.host;\n    this.formattingSettingsService = new FormattingSettingsService();\n    this.target = options.element;\n    this.data = null;\n    if (document) {\n      this.container = document.createElement(\"div\");\n      this.container.classList.add(\"slicer-container\");\n      this.slicerItems = document.createElement(\"ul\");\n      this.container.appendChild(this.slicerItems);\n      this.target.appendChild(this.container);\n    }\n  }\n\n  public update(options: VisualUpdateOptions) {\n    this.formattingSettings = this.formattingSettingsService.populateFormattingSettingsModel(VisualFormattingSettingsModel, options.dataViews);\n    const formatSettings = this.formattingSettings.dataPointCard;\n    setStyle(this.formattingSettings);\n    this.data = transformData(options, this.host);\n    this.formattingSettings.populateColorSelector(this.data.values);\n    const values = this.data.values;\n    while (this.slicerItems.firstChild) {\n      this.slicerItems.firstChild.remove();\n    }\n\n    this.addItem(formatSettings.allSelectedLabel.value, formatSettings.defaultColor.value.value);\n\n    if (values) {\n      values.forEach((value, index) => {\n        this.addItem(value.valueName, value.color);\n      });\n    }\n  }\n\n  private addItem(txt: string, color: string): void {\n    let slicerItem = document.createElement(\"li\");\n    let itemContainer = document.createElement(\"span\");\n    itemContainer.innerText = txt;\n    itemContainer.style.color = color;\n    slicerItem.appendChild(itemContainer);\n    this.slicerItems.appendChild(slicerItem);\n  }\n\n  /**\n   * Returns properties pane formatting model content hierarchies, properties and latest formatting values, Then populate properties pane.\n   * This method is called once every time we open properties pane or when the user edit any format property.\n   */\n  public getFormattingModel(): powerbi.visuals.FormattingModel {\n    return this.formattingSettingsService.buildFormattingModel(this.formattingSettings);\n  }\n}\n","module.exports = Function('return this')();","module.exports = null;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { Visual } from \"../../src/visual\";\nimport powerbiVisualsApi from \"powerbi-visuals-api\";\nimport IVisualPlugin = powerbiVisualsApi.visuals.plugins.IVisualPlugin;\nimport VisualConstructorOptions = powerbiVisualsApi.extensibility.visual.VisualConstructorOptions;\nimport DialogConstructorOptions = powerbiVisualsApi.extensibility.visual.DialogConstructorOptions;\nvar powerbiKey: any = \"powerbi\";\nvar powerbi: any = window[powerbiKey];\nvar customSlicer8EF416FA305C44038B637FBD3BCB2A11_DEBUG: IVisualPlugin = {\n    name: 'customSlicer8EF416FA305C44038B637FBD3BCB2A11_DEBUG',\n    displayName: 'customSlicer',\n    class: 'Visual',\n    apiVersion: '5.1.0',\n    create: (options: VisualConstructorOptions) => {\n        if (Visual) {\n            return new Visual(options);\n        }\n        throw 'Visual instance not found';\n    },\n    createModalDialog: (dialogId: string, options: DialogConstructorOptions, initialState: object) => {\n        const dialogRegistry = globalThis.dialogRegistry;\n        if (dialogId in dialogRegistry) {\n            new dialogRegistry[dialogId](options, initialState);\n        }\n    },\n    custom: true\n};\nif (typeof powerbi !== \"undefined\") {\n    powerbi.visuals = powerbi.visuals || {};\n    powerbi.visuals.plugins = powerbi.visuals.plugins || {};\n    powerbi.visuals.plugins[\"customSlicer8EF416FA305C44038B637FBD3BCB2A11_DEBUG\"] = customSlicer8EF416FA305C44038B637FBD3BCB2A11_DEBUG;\n}\nexport default customSlicer8EF416FA305C44038B637FBD3BCB2A11_DEBUG;"],"names":[],"sourceRoot":""}